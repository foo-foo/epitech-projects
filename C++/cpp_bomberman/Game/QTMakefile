#############################################################################
# Makefile for building: bomberman
# Generated by qmake (2.01a) (Qt 4.8.5) on: Sun Jun 14 17:59:45 2015
# Project:  bomberman.pro
# Template: app
# Command: /usr/bin/qmake -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile bomberman.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -g -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -std=c++11 -g -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/QtCore -I/usr/include/QtGui -I/usr/include -I-I -ILibBomberman_linux_x64/includes -IMenu -ICore/Headers -I. -I.
LINK          = g++
LFLAGS        = 
LIBS          = $(SUBLIBS)  -L/usr/lib64 -L ./LibBomberman_linux_x64/libs/ -lgdl_gl -lGL -lGLEW -lfbxsdk -lSDL2 -lm -ldl -lrt -W -Wall -Wextra -g3 -lsfml-audio -lQtGui -L/usr/lib64 -L/usr/X11R6/lib -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = Menu/home.cpp \
		Menu/launcher.cpp \
		Menu/main.cpp \
		Menu/mainwindow.cpp \
		Menu/options.cpp \
		Core/Srcs/ABonus.cpp \
		Core/Srcs/AObject.cpp \
		Core/Srcs/APlayer.cpp \
		Core/Srcs/Block.cpp \
		Core/Srcs/Bomb.cpp \
		Core/Srcs/BombEngine.cpp \
		Core/Srcs/BonusBomb.cpp \
		Core/Srcs/BonusPower.cpp \
		Core/Srcs/BonusSpeed.cpp \
		Core/Srcs/Bot.cpp \
		Core/Srcs/Box.cpp \
		Core/Srcs/Character.cpp \
		Core/Srcs/Decode.cpp \
		Core/Srcs/Field.cpp \
		Core/Srcs/Flame.cpp \
		Core/Srcs/GameEngine.cpp \
		Core/Srcs/Ground.cpp \
		Core/Srcs/Human.cpp \
		Core/Srcs/Legend.cpp \
		Core/Srcs/Monster.cpp \
		Core/Srcs/Recruit.cpp \
		Core/Srcs/Soldier.cpp \
		Core/Srcs/Teub.cpp \
		Core/Srcs/Undecided.cpp \
		Core/Srcs/Wall.cpp \
		Core/Srcs/Warrior.cpp \
		Menu/mapeditor.cpp \
		Menu/scores.cpp \
		Menu/Opt.cpp moc_home.cpp \
		moc_launcher.cpp \
		moc_mainwindow.cpp \
		moc_options.cpp \
		moc_mapeditor.cpp \
		moc_scores.cpp \
		qrc_bomberressources.cpp
OBJECTS       = home.o \
		launcher.o \
		main.o \
		mainwindow.o \
		options.o \
		ABonus.o \
		AObject.o \
		APlayer.o \
		Block.o \
		Bomb.o \
		BombEngine.o \
		BonusBomb.o \
		BonusPower.o \
		BonusSpeed.o \
		Bot.o \
		Box.o \
		Character.o \
		Decode.o \
		Field.o \
		Flame.o \
		GameEngine.o \
		Ground.o \
		Human.o \
		Legend.o \
		Monster.o \
		Recruit.o \
		Soldier.o \
		Teub.o \
		Undecided.o \
		Wall.o \
		Warrior.o \
		mapeditor.o \
		scores.o \
		Opt.o \
		moc_home.o \
		moc_launcher.o \
		moc_mainwindow.o \
		moc_options.o \
		moc_mapeditor.o \
		moc_scores.o \
		qrc_bomberressources.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/declarative_debug.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		bomberman.pro
QMAKE_TARGET  = bomberman
DESTDIR       = 
TARGET        = bomberman

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET): ui_home.h ui_launcher.h ui_mainwindow.h ui_options.h ui_mapeditor.h ui_scores.h $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)
	{ test -n "$(DESTDIR)" && DESTDIR="$(DESTDIR)" || DESTDIR=.; } && test $$(gdb --version | sed -e 's,[^0-9]\+\([0-9]\)\.\([0-9]\).*,\1\2,;q') -gt 72 && gdb --nx --batch --quiet -ex 'set confirm off' -ex "save gdb-index $$DESTDIR" -ex quit '$(TARGET)' && test -f $(TARGET).gdb-index && objcopy --add-section '.gdb_index=$(TARGET).gdb-index' --set-section-flags '.gdb_index=readonly' '$(TARGET)' '$(TARGET)' && rm -f $(TARGET).gdb-index || true

Makefile: bomberman.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/declarative_debug.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib64/libQtGui.prl \
		/usr/lib64/libQtCore.prl
	$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile bomberman.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/debug.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/declarative_debug.prf:
/usr/share/qt4/mkspecs/features/shared.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib64/libQtGui.prl:
/usr/lib64/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ CONFIG+=debug CONFIG+=declarative_debug -o Makefile bomberman.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/bomberman1.0.0 || $(MKDIR) .tmp/bomberman1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/bomberman1.0.0/ && $(COPY_FILE) --parents Menu/home.hpp Menu/launcher.hpp Menu/mainwindow.hpp Menu/options.hpp Core/Headers/ABonus.hpp Core/Headers/AObject.hpp Core/Headers/APlayer.hpp Core/Headers/Block.hpp Core/Headers/Bomb.hpp Core/Headers/BombEngine.hpp Core/Headers/BonusBomb.hpp Core/Headers/BonusPower.hpp Core/Headers/BonusSpeed.hpp Core/Headers/Bot.hpp Core/Headers/Box.hpp Core/Headers/Character.hpp Core/Headers/Decode.hpp Core/Headers/Field.hpp Core/Headers/Flame.hpp Core/Headers/GameEngine.hpp Core/Headers/Ground.hpp Core/Headers/Human.hpp Core/Headers/IThread.hpp Core/Headers/Legend.hpp Core/Headers/Monster.hpp Core/Headers/Recruit.hpp Core/Headers/Soldier.hpp Core/Headers/Teub.hpp Core/Headers/Thread.hpp Core/Headers/Undecided.hpp Core/Headers/Wall.hpp Core/Headers/Warrior.hpp ui_home.h ui_launcher.h ui_mainwindow.h ui_options.h Menu/mapeditor.hpp Menu/scores.hpp Menu/Opt.hpp .tmp/bomberman1.0.0/ && $(COPY_FILE) --parents Menu/bomberressources.qrc .tmp/bomberman1.0.0/ && $(COPY_FILE) --parents Menu/home.cpp Menu/launcher.cpp Menu/main.cpp Menu/mainwindow.cpp Menu/options.cpp Core/Srcs/ABonus.cpp Core/Srcs/AObject.cpp Core/Srcs/APlayer.cpp Core/Srcs/Block.cpp Core/Srcs/Bomb.cpp Core/Srcs/BombEngine.cpp Core/Srcs/BonusBomb.cpp Core/Srcs/BonusPower.cpp Core/Srcs/BonusSpeed.cpp Core/Srcs/Bot.cpp Core/Srcs/Box.cpp Core/Srcs/Character.cpp Core/Srcs/Decode.cpp Core/Srcs/Field.cpp Core/Srcs/Flame.cpp Core/Srcs/GameEngine.cpp Core/Srcs/Ground.cpp Core/Srcs/Human.cpp Core/Srcs/Legend.cpp Core/Srcs/Monster.cpp Core/Srcs/Recruit.cpp Core/Srcs/Soldier.cpp Core/Srcs/Teub.cpp Core/Srcs/Undecided.cpp Core/Srcs/Wall.cpp Core/Srcs/Warrior.cpp Menu/mapeditor.cpp Menu/scores.cpp Menu/Opt.cpp .tmp/bomberman1.0.0/ && $(COPY_FILE) --parents Menu/home.ui Menu/launcher.ui Menu/mainwindow.ui Menu/options.ui Menu/mapeditor.ui Menu/scores.ui .tmp/bomberman1.0.0/ && (cd `dirname .tmp/bomberman1.0.0` && $(TAR) bomberman1.0.0.tar bomberman1.0.0 && $(COMPRESS) bomberman1.0.0.tar) && $(MOVE) `dirname .tmp/bomberman1.0.0`/bomberman1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/bomberman1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_home.cpp moc_launcher.cpp moc_mainwindow.cpp moc_options.cpp moc_mapeditor.cpp moc_scores.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_home.cpp moc_launcher.cpp moc_mainwindow.cpp moc_options.cpp moc_mapeditor.cpp moc_scores.cpp
moc_home.cpp: Menu/home.hpp
	/usr/bin/moc $(DEFINES) $(INCPATH) Menu/home.hpp -o moc_home.cpp

moc_launcher.cpp: Menu/launcher.hpp
	/usr/bin/moc $(DEFINES) $(INCPATH) Menu/launcher.hpp -o moc_launcher.cpp

moc_mainwindow.cpp: Menu/mainwindow.hpp
	/usr/bin/moc $(DEFINES) $(INCPATH) Menu/mainwindow.hpp -o moc_mainwindow.cpp

moc_options.cpp: Menu/options.hpp
	/usr/bin/moc $(DEFINES) $(INCPATH) Menu/options.hpp -o moc_options.cpp

moc_mapeditor.cpp: Menu/mapeditor.hpp
	/usr/bin/moc $(DEFINES) $(INCPATH) Menu/mapeditor.hpp -o moc_mapeditor.cpp

moc_scores.cpp: Menu/scores.hpp
	/usr/bin/moc $(DEFINES) $(INCPATH) Menu/scores.hpp -o moc_scores.cpp

compiler_rcc_make_all: qrc_bomberressources.cpp
compiler_rcc_clean:
	-$(DEL_FILE) qrc_bomberressources.cpp
qrc_bomberressources.cpp: Menu/bomberressources.qrc \
		Menu/ressources/grass.png \
		Menu/ressources/bonus.png \
		Menu/ressources/mur.png \
		Menu/ressources/slkscr.eot \
		Menu/ressources/slkscr.ttf \
		Menu/ressources/btn1.png \
		Menu/ressources/btn2.png \
		Menu/ressources/background.png \
		Menu/ressources/icon.ico
	/usr/bin/rcc -name bomberressources Menu/bomberressources.qrc -o qrc_bomberressources.cpp

compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all: ui_home.h ui_launcher.h ui_mainwindow.h ui_options.h ui_mapeditor.h ui_scores.h
compiler_uic_clean:
	-$(DEL_FILE) ui_home.h ui_launcher.h ui_mainwindow.h ui_options.h ui_mapeditor.h ui_scores.h
ui_home.h: Menu/home.ui
	/usr/bin/uic Menu/home.ui -o ui_home.h

ui_launcher.h: Menu/launcher.ui
	/usr/bin/uic Menu/launcher.ui -o ui_launcher.h

ui_mainwindow.h: Menu/mainwindow.ui
	/usr/bin/uic Menu/mainwindow.ui -o ui_mainwindow.h

ui_options.h: Menu/options.ui
	/usr/bin/uic Menu/options.ui -o ui_options.h

ui_mapeditor.h: Menu/mapeditor.ui
	/usr/bin/uic Menu/mapeditor.ui -o ui_mapeditor.h

ui_scores.h: Menu/scores.ui
	/usr/bin/uic Menu/scores.ui -o ui_scores.h

compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean compiler_rcc_clean compiler_uic_clean 

####### Compile

home.o: Menu/home.cpp Menu/home.hpp \
		ui_home.h \
		Menu/launcher.hpp \
		Menu/options.hpp \
		Menu/mapeditor.hpp \
		Menu/scores.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o home.o Menu/home.cpp

launcher.o: Menu/launcher.cpp Menu/launcher.hpp \
		ui_launcher.h \
		Menu/home.hpp \
		Menu/Opt.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o launcher.o Menu/launcher.cpp

main.o: Menu/main.cpp Menu/mainwindow.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o Menu/main.cpp

mainwindow.o: Menu/mainwindow.cpp Menu/mainwindow.hpp \
		ui_mainwindow.h \
		Menu/home.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mainwindow.o Menu/mainwindow.cpp

options.o: Menu/options.cpp Menu/options.hpp \
		ui_options.h \
		Menu/home.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o options.o Menu/options.cpp

ABonus.o: Core/Srcs/ABonus.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ABonus.o Core/Srcs/ABonus.cpp

AObject.o: Core/Srcs/AObject.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o AObject.o Core/Srcs/AObject.cpp

APlayer.o: Core/Srcs/APlayer.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o APlayer.o Core/Srcs/APlayer.cpp

Block.o: Core/Srcs/Block.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Block.o Core/Srcs/Block.cpp

Bomb.o: Core/Srcs/Bomb.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Bomb.o Core/Srcs/Bomb.cpp

BombEngine.o: Core/Srcs/BombEngine.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BombEngine.o Core/Srcs/BombEngine.cpp

BonusBomb.o: Core/Srcs/BonusBomb.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BonusBomb.o Core/Srcs/BonusBomb.cpp

BonusPower.o: Core/Srcs/BonusPower.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BonusPower.o Core/Srcs/BonusPower.cpp

BonusSpeed.o: Core/Srcs/BonusSpeed.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BonusSpeed.o Core/Srcs/BonusSpeed.cpp

Bot.o: Core/Srcs/Bot.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Bot.o Core/Srcs/Bot.cpp

Box.o: Core/Srcs/Box.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Box.o Core/Srcs/Box.cpp

Character.o: Core/Srcs/Character.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Character.o Core/Srcs/Character.cpp

Decode.o: Core/Srcs/Decode.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Decode.o Core/Srcs/Decode.cpp

Field.o: Core/Srcs/Field.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Field.o Core/Srcs/Field.cpp

Flame.o: Core/Srcs/Flame.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Flame.o Core/Srcs/Flame.cpp

GameEngine.o: Core/Srcs/GameEngine.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o GameEngine.o Core/Srcs/GameEngine.cpp

Ground.o: Core/Srcs/Ground.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Ground.o Core/Srcs/Ground.cpp

Human.o: Core/Srcs/Human.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Human.o Core/Srcs/Human.cpp

Legend.o: Core/Srcs/Legend.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Legend.o Core/Srcs/Legend.cpp

Monster.o: Core/Srcs/Monster.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Monster.o Core/Srcs/Monster.cpp

Recruit.o: Core/Srcs/Recruit.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Recruit.o Core/Srcs/Recruit.cpp

Soldier.o: Core/Srcs/Soldier.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Soldier.o Core/Srcs/Soldier.cpp

Teub.o: Core/Srcs/Teub.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Teub.o Core/Srcs/Teub.cpp

Undecided.o: Core/Srcs/Undecided.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Undecided.o Core/Srcs/Undecided.cpp

Wall.o: Core/Srcs/Wall.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Wall.o Core/Srcs/Wall.cpp

Warrior.o: Core/Srcs/Warrior.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Warrior.o Core/Srcs/Warrior.cpp

mapeditor.o: Menu/mapeditor.cpp Menu/mapeditor.hpp \
		ui_mapeditor.h \
		Menu/home.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mapeditor.o Menu/mapeditor.cpp

scores.o: Menu/scores.cpp Menu/scores.hpp \
		ui_scores.h \
		Menu/home.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o scores.o Menu/scores.cpp

Opt.o: Menu/Opt.cpp Menu/Opt.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Opt.o Menu/Opt.cpp

moc_home.o: moc_home.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_home.o moc_home.cpp

moc_launcher.o: moc_launcher.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_launcher.o moc_launcher.cpp

moc_mainwindow.o: moc_mainwindow.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_mainwindow.o moc_mainwindow.cpp

moc_options.o: moc_options.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_options.o moc_options.cpp

moc_mapeditor.o: moc_mapeditor.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_mapeditor.o moc_mapeditor.cpp

moc_scores.o: moc_scores.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_scores.o moc_scores.cpp

qrc_bomberressources.o: qrc_bomberressources.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qrc_bomberressources.o qrc_bomberressources.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

